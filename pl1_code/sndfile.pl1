
sndfile: procedure options (main);

	dcl     MAIN		 char (7) static options (constant) init ("sndfile");

	dcl     true		 bit static options (constant) init ("1"b);
	dcl     false		 bit static options (constant) init ("0"b);

	dcl     STX		 char (1) static options (constant) init ("\002"); /* Start of text */
	dcl     ETX		 char (1) static options (constant) init ("\003"); /* End of text */
	dcl     EOT		 char (1) static options (constant) init ("\004"); /* End of transmission */
	dcl     ENQ		 char (1) static options (constant) init ("\005"); /* Enquiry */
	dcl     ACK		 char (1) static options (constant) init ("\006"); /* Acknowledge */
	dcl     ETB		 char (1) static options (constant) init ("\027"); /* End of transmit block */
	dcl     CAN		 char (1) static options (constant) init ("\030"); /* Cancel */
	dcl     EM		 char (1) static options (constant) init ("\031"); /* End of medium */

	dcl     CONTROL_CODE	 char (1) static options (constant) init ("\201");
	dcl     SNDFILE_CODE	 char (1) static options (constant) init ("\207");
	dcl     END_CONTROL_CODE	 char (1) static options (constant) init ("\376");

	dcl     XFER_MODES		 char (512) static options (constant)
				 init ("breakall,^ll,^pl,rawo,rawi,ctl_char,^echoplex,^lfecho,^crecho,^replay,^polite");

	dcl     current_modes	 char (512);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr 	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     argn		 fixed bin init (0);
	dcl     argp		 ptr init (null ());
	dcl     argl		 fixed bin (21) init (0);
	dcl     arg		 char (argl) based (argp);

	dcl     code		 fixed bin (35);

	dcl     snd_file_name	 char (32) varying init ("");
	dcl     completed		 bit;

	dcl     timer_manager_$alarm_call entry (fixed bin (71), bit (2), entry);
	dcl     timer_manager_$reset_alarm_call entry (entry);
	dcl     timeout		 fixed bin (71) static options (constant) init (30);
	dcl     seconds		 bit (2) static options (constant) init ("11"b);

	dcl     com_err_		 entry options (variable);
	dcl     ioa_		 entry options (variable);
	dcl     do		 entry options (variable);

	dcl     error		 condition;

	call cu_$arg_count (argn, code);
	if ^success (code) then return;

	if argn = 1 then do;
		call cu_$arg_ptr (1, argp, argl, code);
		if ^success (code) then return;
		snd_file_name = arg;
	     end;
	else do;
		call ioa_ ("Usage: ^a [filename]", MAIN);
		return;
	     end;

	completed = false;
	on error goto xfer_done_cleanup;

	call iox_$modes (iox_$user_io, XFER_MODES, current_modes, code);
	call send_out (CONTROL_CODE || SNDFILE_CODE || snd_file_name || END_CONTROL_CODE);
	call wait_for (ACK, timeout);

	call iox_$modes (iox_$user_io, "^rawo", "", code);
	call do ("print " || snd_file_name || " -nhe");

	call iox_$modes (iox_$user_io, XFER_MODES, "", code);
	call send_out (EM);

	completed = true;
	goto xfer_done_cleanup;

timeout_handler: entry;
	call ioa_ ("Timeout expired.");
	goto xfer_done_cleanup;

wait_for: procedure (bytecode, timeout);
	dcl     bytecode		 char (1);
	dcl     timeout		 fixed bin (71);
	dcl     buffer		 char (1) init ("");
	dcl     n_read		 fixed bin (21);
	call timer_manager_$alarm_call (timeout, seconds, timeout_handler);
	do while (buffer ^= bytecode);
	     call iox_$get_chars (iox_$user_input, addr (buffer), 1, n_read, code);
	     call timer_manager_$reset_alarm_call (timeout_handler);
	     if ^success (code) | (buffer = CAN) then goto xfer_done_cleanup;
	end;
     end wait_for;

send_out: procedure (bytecode);
	dcl     bytecode		 char (*);
	call iox_$put_chars (iox_$user_output, addr (bytecode), length (bytecode), code);
	if ^success (code) then goto xfer_done_cleanup;
     end send_out;

success: procedure (code) returns (bit);
	dcl     code		 fixed bin (35);
	if code = 0 then return (true);
	call com_err_ (code, MAIN);
	return (false);
     end success;

xfer_done_cleanup:
	call iox_$modes (iox_$user_io, current_modes, "", code);
	if ^completed then call ioa_ ("Transfer aborted.");

%include iox_dcls;

     end sndfile;

