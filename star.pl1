
starrunners: star: procedure options (variable);

          dcl       ioa_                          entry options (variable);
          dcl       ioa_$nnl                      entry options (variable);
          dcl       getline                       entry options (variable);
          dcl       do                            entry options (variable);
          
          dcl       hcs_$make_seg                 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
          dcl       hcs_$initiate                 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
          dcl       hcs_$delentry_seg             entry (ptr, fixed bin (35));
          dcl       hcs_$set_ring_brackets        entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
          
          dcl       timer_manager_$alarm_call     entry (fixed bin (71), bit (2), entry);
          dcl       timer_manager_$reset_alarm_call entry (entry);
          
          dcl       get_pdir_                     entry returns (char (168));
          dcl       pdir                          char (32) init ("");
          dcl       edir                          char (32) init ("");
          
          dcl       set_acl                       entry (char (*), char (*), char (*));
          dcl       entry                         char (45) init ("");
          dcl       acl                           char (2) init ("rw");
          dcl       whom                          char (5) init ("*.*.*");
          
          dcl       print                         entry (char (*), char (*));
          dcl       helpfile                      char (25) init (">udd>sct>game>s>star.help");
          
          dcl       read_password_                entry (char (*), char (*));
          
          dcl       com_err_                      entry options (variable);
          dcl       MAIN                          char (11) init ("starrunners");
          dcl       version                       char (5) init ("4.4");
          
          dcl       user_info_$whoami             entry (char (*), char (*), char (*));
          dcl       person                        char (32) init ("");
          dcl       project                       char (9) init ("");
          dcl       access                        char (3) init ("no");
          
          dcl       term_$single_refname          entry (char (*) aligned, fixed bin (35));
          dcl       DO_dir                        char (4) init (">sss");
          dcl       DO                            char (2) init ("do");
          
          dcl       cu_$arg_count                 entry (fixed bin, fixed bin (35));
          dcl       cu_$arg_ptr                   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
          dcl       argn                          fixed bin init (0);
          dcl       argp                          ptr init (null ());
          dcl       argl                          fixed bin (21) init (0);
          dcl       arg                           char (argl) based (argp);
          
          dcl       input                         char (256) varying init ("");
          dcl       shiptype                      char (14) init ("");
          dcl       dname                         char (14) init (">udd>sct>g>dbd");
          dcl       ename                         char (10) init ("sv4.4.ship");
          dcl       xname                         char (10) init ("sv4.4.univ");
          dcl       aname                         char (10) init ("sv1.2.info");
          dcl       ring_brackets                 (3) fixed bin (3) init (5, 5, 5);
          dcl       code                          fixed bin (35) init (0);
          dcl       allowed_chars                 char (87) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 !$%&'()*:=-[]{}<>.,/?_|^");
          dcl       enter_admin_loop              bit (1) init ("0"b);
          dcl       video_mode                    bit (1) init ("0"b);
          dcl       accept_notifications          bit (1) init ("0"b);
          dcl       on_the_list                   bit (1) init ("0"b);
          dcl       list_players                  bit (1) init ("0"b);
          dcl       target                        char (10) init ("");
          dcl       (x, y, z)                     fixed bin init (0);
          
          dcl       (univptr, my, enemy, adminptr) internal static ptr init (null ());
          
          dcl       1 admin_info                  aligned based (adminptr),
                      2 game_admin                char (21),
                      2 user_info_line            char (30),
                      2 com_query_line            char (30),
                      2 star_comn                 fixed bin,
                      2 star_coms                 (admin_info.star_comn) char (21);
                      
          dcl       1 universe                    aligned based (univptr),
                      2 number                    fixed bin,
                      2 pdir                      (10) char (32),
                      2 user                      (10) char (21),
                      2 unique_id                 (10) fixed bin,
                      2 holes                     fixed bin,
                      2 black_hole                (5) char (8),
                      2 password                  char (10),
                      2 robot                     (20),
                        3 name                    char (5),
                        3 energy                  fixed bin,
                        3 condition               char (7),
                        3 location                char (8),
                        3 controller              char (21),
                      2 notifications             (50),
                        3 person_id               char (21),
                        3 project_id              char (9),
                      2 lock                      fixed bin (36);
                      
          dcl       1 ship                        aligned based,
                      2 user                      char (32),
                      2 unique_id                 fixed bin,
                      2 name                      char (10),
                      2 type                      char (14),
                      2 energy_cur                fixed bin,
                      2 energy_old                fixed bin,
                      2 energy_max                fixed bin,
                      2 shields_cur               fixed bin,
                      2 shields_old               fixed bin,
                      2 shields_max               fixed bin,
                      2 torps_cur                 fixed bin,
                      2 torps_old                 fixed bin,
                      2 torps_max                 fixed bin,
                      2 life_cur                  fixed bin,
                      2 life_old                  fixed bin,
                      2 condition                 char (12),
                      2 location                  char (8),
                      2 message                   char (256),
                      2 fromname                  char (10),
                      2 fromtype                  char (14),
                      2 deathmes                  char (4),
                      2 deadname                  char (10),
                      2 deadtype                  char (14),
                      2 cloak_on                  bit (1),
                      2 tractor_on                bit (1),
                      2 tracname                  char (10),
                      2 monitored_by              char (10),
                      2 monname                   char (10),
                      2 montype                   char (14),
                      2 monloc                    char (8),
                      2 black_hole                char (8),
                      2 psionics                  bit (1),
                      2 psi_num                   fixed bin,
                      2 psi_name                  (0: 10) char (10),
                      2 psi_type                  (0: 10) char (14),
                      2 psi_mes                   (0: 10) char (8),
                      2 lock                      bit (36);
                      
          dcl       continue_to_signal_           entry (fixed bin (35));
          dcl       quit                          condition;
          dcl       seg_fault_error               condition;
          dcl       finish                        condition;

/***** LET'S GET THE SHOW ON THE ROAD -- PRELIMINARY STUFF *****/

/* SET GAME MODES: -admin, -video, -list_players CONTROL_ARGS */
          call cu_$arg_count (argn, code);
          if code ^= 0 then do;
                    call com_err_ (code, MAIN);
                    return;
               end;
          do x = 1 to argn;
               call cu_$arg_ptr (x, argp, argl, code);
               if arg = "-admin" then enter_admin_loop = "1"b;
               else if arg = "-video" then video_mode = "1"b;
               else if arg = "-list_players" | arg = "-lp" then list_players = "1"b;
               else if arg = "-accept_notifications" | arg = "-ant" then accept_notifications = "1"b;
               else if arg = "-refuse_notifications" | arg = "-rnt" then accept_notifications = "0"b;
               else if substr (arg, 1, 1) = "-" then do;
                         call ioa_ ("^a: Specified control argument is not accepted. ^a", MAIN, arg);
                         return;
                    end;
          end;
          
/* ENTER ADMIN LOOP IF -admin CONTROL_ARG WAS SUPPLIED, AND USER HAS ACCESS */
          call term_$single_refname ((DO), code);
          call hcs_$initiate (DO_dir, DO, DO, 0, 0, (null ()), code);
          call hcs_$initiate (dname, aname, "", 0, 0, adminptr, code);
          if code ^= 0 & adminptr = null () then do;
                    call ioa_ ("^/Administrative matrix not found.  Game locked.");
                    return;
               end;
          call do (admin_info.user_info_line);
          call do (admin_info.com_query_line);
          call hcs_$initiate ((get_pdir_ ()), "pit", "", 0, 0, pit_ptr, code);
          person = pit.login_name;
          project = pit.project;
          if enter_admin_loop then do;
                    if person = admin_info.game_admin then do;
                              call star_admin;
                              return;
                         end;
                    else do;
                              call ioa_ ("This command is for Starrunners Administrators only.");
                              return;
                         end;
               end;
               
/* SET UP GAME ENVIRONMENT */
          call ioa_ ("^/Starrunners ^a", version);
          do x = 1 to admin_info.star_comn;
               if person = admin_info.star_coms (x) then access = "yes";
          end;
          call hcs_$initiate (dname, xname, "", 0, 0, univptr, code);
          if code ^= 0 & univptr = null () then do;
                    call ioa_ ("^/I'm sorry, but the STARRUNNERS universe is closed.^/Please feel free to try later.  Thank you...");
                    return;
               end;
          if universe.number = 10 then do;
                    call ioa_ ("^/I'm sorry, but the STARRUNNERS universe is filled to maximum capacity.^/Please feel free to try later.  Thank you...");
                    return;
               end;
               
/* ACCEPT/REFUSE NOTIFICATIONS.  PUT/TAKE ON/FROM LIST */
          do x = 1 to 50;
               if universe.notifications (x).person_id = person & universe.notifications (x).project_id = project then do;
                         if ^accept_notifications then do;
                                   universe.notifications (x).person_id = "";
                                   universe.notifications (x).project_id = "";
                              end;
                         on_the_list = "1"b;
                    end;
          end;
          if ^on_the_list & accept_notifications then do;
                    do x = 1 to 50;
                         if universe.notifications (x).person_id = "" & universe.notifications (x).project_id = "" then do;
                                   universe.notifications (x).person_id = person;
                                   universe.notifications (x).project = project;
                                   return;
                              end;
                    end;
               end;
          if ^on_the_list & accept_notifications then call ioa_ ("^/Sorry, but the notifications list is full to maximum capacity...");
          if on_the_list then return;
          
/* IF -list_players CONTROL_ARG WAS SUPPLIED, LIST PLAYERS, NO GAME */
          if list_players then do;
                    call ioa_ ("^/List of players: ^[none^]^[^d^]", (universe.number = 0), (universe.number > 0), universe.number);
                    do x = 1 to universe.number;
                         call ioa_ ("^3x^a", universe.user (x));
                    end;
                    return;
               end;
               
/* ASK HIM IF HE WANTS INSTRUCTIONS */
          do while (input = "");
               call ioa_$nnl ("^/Would you like instructions? ");
               call getline (input);
               if input = "yes" | input = "y" then call print (helpfile, "1");
               else if input ^= "no" & input ^= "n" then do;
                         call ioa_ ("^/Please answer ""yes"" or ""no"".");
                         input = "";
                    end;
          end;
          
/* GET GAME PASSWORD (IF THERE IS ONE) */
          if universe.password ^= "" then do;
                    call ioa_$nnl ("^/Password: ");
                    call getline (input);
                    if input ^= universe.password then do;
                              call ioa_ ("Incorrect password supplied.");
                              call ioa_ ("Please contact Starrunners Administrator for correct password.");
                              return;
                         end;
               end;
               
/* SET quit AND seg_fault_error TO DESTROY SHIP/END GAME */
          on quit call game_over;
          on seg_fault_error call universe_destroyed;
          
/* SET finish TO TURN OFF NOTIFICATIONS */
          on finish begin;
                    do x = 1 to 50;
                         if universe.notifications (x).person_id = person & universe.notifications (x).project_id = project then do;
                                   universe.notifications (x).person_id = "";
                                   universe.notifications (x).project_id = "";
                              end;
                    end;
                    call continue_to_signal_ ((0));
               end;
               
/* MAKE HIS SHIP */
          pdir = get_pdir_ ();
          call hcs_$initiate(pdir, ename, "", 0, 0, my, code);
          if my ^= null () then call hcs_$delentry_seg (my, code);
          call hcs_$make_seg (pdir, ename, "", (10), my, code);
          entry = pdir || ">" || ename;
          call set_acl (entry, acl, whom);
          call hcs_$set_ring_brackets (pdir, ename, ring_brackets, code);
          if code ^= 0 then do;
                    call com_err_ (code, MAIN);
                    return;
               end;
               
/* CLEAN OUT SHIP DATA FOR A FRESH START */
          call lock (my -> ship.lock);
          my -> ship.user, my -> ship.name, my -> ship.type, my -> ship.condition, my -> ship.message, my -> ship.fromname, my -> ship.fromtype, my -> ship.deathmes, my -> ship.deadname, my -> ship.deadtype, my -> ship.tracname, my -> ship.monitored_by, my -> ship.monloc, my -> ship.psi_name, my -> ship.psi_type, my -> ship.psi_mes = "";
          my -> ship.monname, my -> ship.montype = "#";
          my -> ship.location = "PHASING";
          my -> ship.black_hole = "start";
          my -> ship.energy_cur, my -> ship.energy_old, my -> ship.energy_max, my -> ship.shields_cur, my -> ship.shields_old, my -> ship.shields_max, my -> ship.torps_cur, my -> ship.torps_old, my -> ship.torps_max, my -> ship.life_cur, my -> ship.life_old, my -> ship.psi_num = 0;
          my -> ship.cloak_on, my -> ship.tractor_on, my -> ship.psionics = "0"b;
          my -> ship.unique_id = clock ();
          call unlock (my -> ship.lock);
          
/* ADD HIM TO LIST OF PLAYERS IN THE STARRUNNERS UNIVERSE */
          if universe.number = 10 then do;
                    call ioa_ ("I'm sorry, but the STARRUNNERS universe if filled to maximum capacity.^/Please feel free to try later.  Thank you...");
                    return;
               end;
          call lock (universe.lock);
          universe.number = universe.number + 1;
          universe.pdir (universe.number) = pdir;
          universe.unique_id (universe.number) = my -> ship.unique_id;
          universe.user (universe.number) = person;
          if universe.number = 1 then do;
                    universe.holes = 0;
                    universe.black_hole = "";
                    universe.robot (*).energy = 0;
                    universe.robot (*).location = "";
                    universe.robot (*).condition = "";
                    universe.robot (*).controller = "none";
               end;
          call unlock (universe.lock);
          
/* RECORED THE USER'S PERSON_ID */
          call lock (my -> ship.lock);
          my -> ship.user = person;
          call unlock (my -> ship.lock);
          
/* GET SHIP NAME */
          input = "";
          do while (input = "");
               call ioa_$nnl ("^/Ship name: ");
               call getline (input);
               if verify (input, allowed_chars) ^= 0 then do;
                         call ioa_ ("Invalid ship name: ^a", input);
                         input = "";
                    end;
               do x = 1 to universe.number;
                    edir = universe.pdir (x);
                    call hcs_$initiate (edir, ename, "", 0, 0, enemy, code);
                    if enemy ^= null () & edir ^= pdir & input = enemy -> ship.name then do;
                              call ioa_ ("^/The name you have chosen is presently in use.^/Please choose a different name.");
                              input = "";
                         end;
               end;
               if input ^= "" then my -> ship.name = input;
          end;
          
/* GET SHIP TYPE */
          input = "";
          do while (input = "");
               call ioa_$nnl ("Ship type: ");
               call getline (input);
               if input = "Destroyer" | input = "D" then shiptype = "Destroyer";
               else if input = "Cruiser" | input = "C" then shiptype = "Cruiser";
               else if input = "Starship" | input = "S" then shiptype = "Starship";
               else if input = "Star Commander" | input = "SC" then do;
                         if access ^= "yes" then do;
                                   call ioa_ ("^/You do not have proper clearance for Star Command.^/");
                                   input = "";
                              end;
                         else do;
                                   call ioa_ ();
                                   call read_password_ ("Password: ", shiptype);
                                   if length (ltrim (rtrim (shiptype))) < 3 then do;
                                             call ioa_ ("^a: Password must be at least 3 characters long.", MAIN);
                                             return;
                                        end;
                                   call read_password_ ("Codeword:", target);
                                   if target ^= generate_codeword (shiptype) then do;
                                             call ioa_ ("Star Command clearance check failed.^/");
                                             input = "";
                                        end;
                                   else call ioa_ ("^/You have been cleared for Star Command.");
                                   shiptype = "Star Commander";
                              end;
                    end;
               else do;
                         call ioa_ ("That is not a standard ship type ---> use: Destroyer, Cruiser, or Starship.");
                         input = "";
                    end;
          end;
          
/* FINAL SET-UP PREPARATIONS */
          call make_ship (shiptype);
          call ship_status;
          call black_hole_check;
          call check_monitor;
          call send_notifications;

/***** ENTER COMMAND LOOP ENVIRONMENT *****/

command_loop:
          on quit call command_seq_terminator;
          on seg_fault_error call universe_destroyed;
          do while ("1"b);
               call update_condition;
               input = "";
               call ioa_$nnl ("^/COMMAND :> ");
               call timed_input (input);
               call security_check;
               if input = "status" | input = "st" then call ship_status;
               else if input = "lscan" | input = "ls" then call long_scan;
               else if input = "sscan" | input = "ss" then call short_scan;
               else if input = "thrust" | input = "th" then call move_ship;
               else if input = "warpout" | input = "wp" then call warpout;
               else if input = "missile" | input = "ms" then call launch_missile;
               else if input = "lasers" | input = "lr" then call fire_lasers;
               else if input = "contact" | input = "ct" then call contact_ship;
               else if input = "dock" | input = "dk" then call dock;
               else if input = "sdestruct" | input = "sd" then call self_destruct;
               else if input = "deathray" | input = "dr" then call death_ray;
               else if input = "*" then call game_over;
               
               else if input = "." then call ioa_ ("^/^a ^a", MAIN, version);
               else if my -> ship.type = "Star Commander" then do;
                         if input = "cloaking-device" | input = "cd" then call cloaking_device;
                         else if input = "nova-blast" | input = "nb" then call nova_blast;
                         else if input = "star-gate" | input = "sg" then call create_stargate;
                         else if input = "tractor-beam" | input = "tb" then call tractor_beam;
                         else if input = "tractor-pull" | input = "tp" then call tractor_pull;
                         else if input = "trojan-horse" | input = "tj" then call trojan_horse;
                         else if input = "computer" | input = "cm" then call computer;
                         else if substr (input, 1, 1) = ":" then call escape_to_multics;
                         else if input = "?" then do;
                                   call command_list;
                                   call classified_com_list;
                              end;
                         else if input ^= "" then do;
                                   call ioa_ ("^/*** COMPUTER:");
                                   call ioa_ ("   That is not a standard ship command:");
                                   call ioa_ ("   Type a ""?"" for a list of proper commands");
                              end;
                    end;
               else if input = "?" then call command_list;
               else if input ^= "" then do;
                         call ioa_ ("^/*** COMPUTER:");
                         call ioa_ ("   That is not a standard ship command:");
                         call ioa_ ("   Type a ""?"" for a list of proper commands");
                         input = "";
                    end;
               
/* ENVIRONMENT CHECKING ROUTINES -- DAMAGE, MESSAGES, DEATHS, BLACK_HOLES, MONITOR, PSIONICS */
               call damage_check;
               call message_check;
               call death_check;
               call black_hole_check;
               call check_monitor;
               call psionics_check;
               call robot_functions;
               
          end;

generate_codeword: procedure (key_word) returns (char (10));

          dcl     key_word               char (*) parm;
          dcl     password               char (10) init ("");
          dcl     new_pass               char (10) varying init ("");
          dcl     (idx, shift, position, new_pos) fixed bin init (0);
          dcl     ALPHA_1                char (26) init ("abcdefghijklmnopqrstuvwxyz");
          dcl     ALPHA_2                char (26) init ("zafkpubglqvchmrwdinsxejoty");
          
          password = key_word;
          do x = 1 to 3;
               do y = 1 to length (rtrim (password));
                    if y = length (rtrim (password)) then idx = 0;
                    else idx = y;
                    shift = index (ALPHA_1, substr (password, idx + 1, 1));
                    position = index (ALPHA_2, substr (password, y, 1));
                    new_pos = shift + position;
                    if new_pos > 26 then new_pos = new_pos - 26;
                    new_pass = new_pass || substr (ALPHA_2, new_pos, 1);
               end;
               password = new_pass;
               new_pass = "";
          end;
          return (password);
          
     end generate_codeword;
     
lock: procedure (lock_bit);

          dcl     set_lock_$lock         entry (bit (36) aligned, fixed bin, fixed bin (35));
          dcl     lock_bit               bit (36) aligned parm;
          dcl     code                   fixed bin (35) init (0);
          
          call set_lock_$lock (lock_bit, 5, code);
          
     end lock;
     
unlock: procedure (lock_bit);

          dcl     set_lock_$unlock       entry (bit (36) aligned, fixed bin (35));
          dcl     lock_bit               bit (36) aligned parm;
          dcl     code                   fixed bin (35) init (0);
          
          call set_lock_$unlock (lock_bit, code);
          
     end unlock;
     

/***** STAR ADMIN SYSTEM *****/

star_admin: procedure;

          dcl       password             char (10) init ("");
          dcl       MAIN                 char (10) init ("star_admin");
          dcl       version              char (5) init ("1.2");
          dcl       date                 builtin;
          
          input = "";
          call ioa_ ("^/Star Admin ^a^/", version);
          call read_password_ ("Password:", password);
          if password ^= ltrim (char (date)) then do;
                    call ioa_ ("^a: Incorrect password supplied.", MAIN);
                    return;
               end;
          password = "";
          do while ("1"b);
               call ioa_$nnl ("^/Star admin: ");
               call getline (input);
               if input = "big-bang" | input = "bb" then call big_bang;
               else if input = "set-pswd" | input = "sp" then call set_password;
               else if input = "remove-pswd" | input = "rp" then call remove_password;
               else if input = "add-starcom" | input = "as" then call add_star_commander;
               else if input = "remove-starcom" | input = "rs" then call remove_star_commander;
               else if input = "generate-code" | input = "gc" then call generate_password;
               else if input = "quit" | input = "q" then return;
               else if input = "." then call ioa_ ("^/^a ^a", MAIN, version);
               else if input = "?" then do;
                         call ioa_ ("^/Star Admin commands:");
                         call ioa_ ("   (bb) big-bang ---------- Destroy the universe");
                         call ioa_ ("   (sp) set-pswd ---------- Set a game password");
                         call ioa_ ("   (rp) remove-pswd ------- Remove the game password");
                         call ioa_ ("   (as) add-starcom ------- Add a Person_ID as a Star Commander");
                         call ioa_ ("   (rs) remove-starcom ---- Remove a Person_ID as a Star Commander");
                         call ioa_ ("   (gc) generate-code ----- Generate a codeword");
                         call ioa_ ("    (q) quit -------------- Quit the star admin system");
                    end;
               else if input ^= "" then call ioa_ ("^a: That is not a standard request:^/^12xType a ""?"" for a list of proper requests.", MAIN);
          end;
          
/* STAR ADMIN REQUEST ROUTINES */

big_bang: procedure;

          call hcs_$initiate (dname, xname, "", 0, 0, univptr, code);
          if code ^= 0 & univptr = null () then do;
                    call ioa_ ("^a (big_bang): No database was found.", MAIN);
                    call ioa_ ("Creating ^a>^a", dname, xname);
                    call hcs_$make_seg (dname, xname, "", (10), univptr, code);
                    universe.number, universe.holes, universe.unique_id = 0;
                    universe.pdir, universe.black_hole, universe.password, universe.user = "";
               end;
          else do;
                    call ioa_ ("^a (big_bang): Database destroyed and re-created.", MAIN);
                    call hcs_$delentry_seg (dname, xname, "", (10), univptr, code);
                    call hcs_$make_seg (dname, xname, "", (10), univptr, code);
                    universe.number, universe.holes, universe.unique_id = 0;
                    universe.pdir, universe.black_hole, universe.password, universe.user = "";
               end;
          call hcs_$initiate (dname, aname, "", 0, 0, adminptr, code);
          if code ^= 0 & adminptr = null () then do;
                    call create_database;
                    call ioa_ ("^/Created: ^a>^a", dname, aname);
               end;
          else do;
                    call hcs_$delentry_seg (adminptr, code);
                    call create_database;
               end;
               
create_database: procedure;

          dcl     acl                   char (1) init ("r");
          dcl     whom                  char (5) init ("*.*.*");
          
          call hcs_$make_seg (dname, aname, "", (10), adminptr, code);
          call set_acl (rtrim (dname) || ">" || aname, acl, whom);
          call ioa_$nnl ("^a (admin_info): Game Admin: ", MAIN);
          call getline (input);
          admin_info.game_admin = input;
          call ioa_$nnl ("^a (admin_info): User_info_line: ", MAIN);
          call getline (input);
          admin_info.user_info_line = input;
          call ioa_$nnl ("^a (admin_info): Command_query_line: ", MAIN);
          call getline (input);
          admin_info.com_query_line = input;
          admin_info.star_comn = 1;
          call ioa_$nnl ("^a (admin_info): Star Commander: ", MAIN);
          call getline (input);
          admin_info.star_coms (1) = input;
          
     end create_database;
     
     end big_bang;

getline: procedure (input_var);

          dcl     input_var              char (*) varying parm;
          dcl     MAIN                   char (11) init ("starrunners");
          dcl     command_query_         entry options (variable);
          
          query_info.version = query_info_version_5;
          query_info.suppress_spacing = "1"b;
          query_info.suppress_name_sw = "1"b;
          query_info.cp_escape_control = "10"b;
          
          call command_query_ (addr (query_info), input_var, MAIN);
          
%include query_info;

     end getline;
     