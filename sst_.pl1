sst_: procedure options (variable);

          dcl     scip                  ptr parm;
          dcl     nptr                  ptr parm;
          dcl     Nptr                  ptr init (null ());
          dcl     game_length           fixed bin parm;
          dcl     rank                  fixed bin parm;
          dcl     last_name             char (*) parm;
          
          dcl     1 node                aligned based (nptr) like NODE;
          dcl     1 Node                aligned based (Nptr) like NODE;
          
          dcl     input                 char (100) varying init ("");
          dcl     (x, y, z)             fixed bin init (0);
          dcl     (a, b, c)             fixed bin init (0);
          dcl     sst_data_$version_string ext char (10);
          
          dcl     argn                  fixed bin init (0);
          dcl     argp                  ptr init (null ());
          dcl     argl                  fixed bin (21) init (0);
          dcl     arg                   char (argl) based (argp);
          dcl     code                  fixed bin (35) init (0);
          
set_up_game: entry (nptr, game_length, rank);

          dcl     it_was_not_placed      bit (1) init ("0"b);
          
          node.arachnidT = mod (clock (), (game_length * 10)) + game_length * 10;
          node.skinnyT = mod (clodk (), (game_length * 5)) + game_length * 5;
          node.sector (*, *).arachnidN = 0;
          node.sector (*, *).skinnyN = 0;
          node.sector (*, *).radiation = "0";
          node.sector (*, *).supply = "0";
          node.sector (*, *).point = ".";
          node.chart (*, *).arachnidN = ".";
          node.chart (*, *).skinnyN = ".";
          node.chart (*, *).radiation = ".";
          node.chart (*, *).supply = ".";
          node.rank = rank;
          node.time_left = trunc ((node.arachnidT + node.heavy_beamT) * ((4 - node.rank) * .25));
          node.SX = mod (clock (), 5) + 1;
          node.SY = mod (clock (), 5) + 1;
          node.PX = mod (clock (), 10) + 1;
          node.PY = mod (clock (), 10) + 1;
          node.sector (node.SX, node.SY).point (node.PX, node.PY) = TROOPER;
          node.HE_bombN = mod (clock (), 6) + 10;
          node.supplyN = mod (clock (), (5 - rank)) + 2;
          node.supply (*).uses_left = 0;
          node.beacon.SX = mod (clock (), 5) + 1;
          node.beacon.SY = mod (clock (), 5) + 1;
          node.beacon.PX = mod (clock (), 10) + 1;
          node.beacon.PY = mod (clock (), 10) + 1;
          node.score.total = 0;
          
/* Set up the ARACHNIDS */

          do x = 1 to node.arachnidT;
               it_was_not_placed = "1"b;
               do while (it_was_not_placed);
                    y = mod (clock (), 5) + 1;
                    z = mod (clock (), 5) + 1;
                    if ((y ^= node.SX) | (z ^= node.SY)) & (node.sector (y, z).arachnidN < 9) then do;
                              node.Arachnid (x).SX = y;
                              node.Arachnid (x).SY = z;
                              y = mod (clock (), 10) + 1;
                              z = mod (clock (), 10) + 1;
                              if (node.sector (node.Arachnid (x).SX, node.Arachnid (x).SY).point (y, z) = ".") then do;
                                        node.Arachnid (x).PX = y;
                                        node.Arachnid (x).PY = z;
                                        node.Arachnid (x).life_pts = mod (clock (), rank * 100) + 100;
                                        node.sector (node.Arachnid (x).SX, node.Arachnid (x).SY).point (node.Arachnid (x).PX, node.Arachnid (x).PY) = ARACHNID;
                                        node.sector (node.Arachnid (x).SX, node.Arachnid (x).SY).arachnidN = node.sector (node.Arachnid (x).SX, node.Arachnid (x).SY).arachnidN + 1;
                                        it_was_not_placed = "0"b;
                                   end;
                         end;
               end;
          end;
          
/* Set up the SKINNIES */

          do x = 1 to node.skinnyT;
               it_was_not_placed = "1"b;
               do while (it_was_not_placed);
                    y = mod (clock (), 5) + 1;
                    z = mod (clock (), 5) + 1;
                    if ((y ^= node.SX) | (z ^= node.SY)) & (node.sector (y, z).skinnyN < 9) then do;
                              node.Skinny (x).SX = y;
                              node.Skinny (x).SY = z;
                              y = mod (clock (), 10) + 1;
                              z = mod (clock (), 10) + 1;
                              if (node.sector (node.Skinny (x).SX, node.Skinny (x).SY).point (y, z) = ".") then do;
                                        node.Skinny (x).PX = y;
                                        node.Skinny (x).PY = z;
                                        node.Skinny (x).life_pts = mod (clock (), rank * 50) + 50;
                                        node.sector (node.Skinny (x).SX, node.Skinny (x).SY).skinnyN = node.sector (node.Skinny (x).SX, node.Skinny (x).SY).skinnyN + 1;
                                        node.sector (node.Skinny (x).SX, node.Skinny (x).SY).point (node.Skinny (x).PX, node.Skinny (x).PY) = SKINNY;
                                        it_was_not_placed = "0"b;
                                   end;
                         end;
               end;
          end;
          
/* Set up the HEAVY BEAMS */

          node.heavy_beamT = round ((node.arachnidT / 10), 0);
          do x = 1 to node.heavy_beamT;
               it_was_not_placed = "1"b;
               do while (it_was_not_placed);
                    y = mod (clock (), 5) + 1;
                    z = mod (clock (), 5) + 1;
                    if ((y ^= node.SX) | (z ^= node.SY)) & (node.sector (y, z).arachnidN < 9) then do;
                              node.Heavy_beam (x).SX = y;
                              node.Heavy_beam (x).SY = z;
                              y = mod (clock (), 10) + 1;
                              z = mod (clock (), 10) + 1;
                              if (node.sector (node.Heavy_beam (x).SX, node.Heavy_beam (x).SY).point (y, z) = ".") then do;
                                        node.Heavy_beam (x).PX = y;
                                        node.Heavy_beam (x).PY = z;
                                        node.Heavy_beam (x).life_pts = mod (clock (), rank * 200) + 200;
                                        node.sector (node.Heavy_beam (x).SX, node.Heavy_beam (x).SY).point (node.Heavy_beam (x).PX, node.Heavy_beam (x).PY) = HEAVY_BEAM;
                                        node.sector (node.Heavy_beam (x).SX, node.Heavy_beam (x).SY).arachnidN = node.sector (node.Heavy_beam (x).SX, node.Heavy_beam (x).SY).arachnidN + 1;
                                        it_was_not_placed = "0"b;
                                   end;
                         end;
               end;
          end;

/* Set up the MISSILE_LAUNCHERS */

          node.missile_lT = round ((node.skinnyT / 5), 0);
          do x = 1 to node.missile_lT;
               it_was_not_placed = "1"b;
               do while (it_was_not_placed);
                    y = mod (clock (), 5) + 1;
                    z = mod (clock (), 5) + 1;
                    if ((y ^= node.SX) | (z ^= node.SY)) & (node.sector (y, z).skinnyN < 9) then do;
                              node.Missile_l (x).SX = y;
                              node.Missile_l (x).SY = z;
                              y = mod (clock (), 10) + 1;
                              z = mod (clock (), 10) + 1;
                              if (node.sector (node.Missile_l (x).SX, node.Missile_l (x).SY).point (y, z) = ".") then do;
                                        node.Missile_l (x).PX = y;
                                        node.Missile_l (x).PY = z;
                                        node.Missile_l (x).life_pts = mod (clock (), rank * 150) + 150;
                                        node.sector (node.Missile_l (x).SX, node.Missile_l (x).SY).point (node.Missile_l (x).PX, node.Missile_l (x).PY) = MISSILE_L;
                                        node.sector (node.Missile_l (x).SX, node.Missile_l (x).SY).skinnyN = node.sector (node.Missile_l (x).SX, node.Missile_l (x).SY).skinnyN + 1;
                                        it_was_not_placed = "0"b;
                                   end;
                         end;
               end;
          end;

/* Set up the MOUNTAINS */

          do x = 1 to 5;
               do y = 1 to 5;
                    z = mod (clock (), 10);
                    do a = 1 to z;
                         it_was_not_placed = "1"b;
                         do while (it_was_not_placed);
                              b = mod (clock (), 10) + 1;
                              c = mod (clock (), 10) + 1;
                              if (node.sector (x, y).point (b, c) = ".") then do;
                                        node.sector (x, y).point (b, c) = MOUNTAIN;
                                        it_was_not_placed = "0"b;
                                   end;
                         end;
                    end;
               end;
          end;
          
/* Set up the SUPPLY_SHIPS *

          do x = 1 to node.supplyN;
               it_was_not_placed = "1"b;
               do while (it_was_not_placed);
place_supply_ship:
                    y = mod (clock (), 5) + 1;
                    z = mod (clock (), 5) + 1;
                    if ((y ^= node.SX) | (z ^= node.SY)) then do;
                              do a = 1 to (x - 1);
                                   if (y = node.supply (a).SX) & (z = node.supply (a).SY) then goto place_supply_ship;
                              end;
                              node.supply (x).SX = y;
                              node.supply (x).SY = z;
                              y = mod (clock (), 10) + 1;
                              z = mod (clock (), 10) + 1;
                              if (node.sector (node.supply (x).SX, node.supply (x).SY).point (y, z) = ".") then do;
                                        node.supply (x).PX = y;
                                        node.supply (x).PY = z;
                                        node.supply (x).uses_left = game_length;
                                        node.sector (node.supply (x).SX, node.supply (x).SY).point (node.supply (x).PX, node.supply (x).PY) = SUPPLY_SHIP;
                                        node.sector (node.supply (x).SX, node.supply (x).SY).supply = "S";
                                        node.chart (node.supply (x).SX, node.supply (x).SY).supply = "S";
                                        it_was_not_placed = "0"b;
                                   end;
                         end;
               end;
          end;

/* Set up the BREACHES */

          do while (node.breachN = 0);
               do x = 1 to 5;
                    do y = 1 to 5;
                         z = 0;
                         if (node.sector (x, y).arachnidN > 0) then z = mod (clock (), 3) + 1;
                         if (z = 1) then do;
                                   it_was_not_placed = "1"b;
                                   do while (it_was_not_placed);
                                        b = mod (clock (), 10) + 1;
                                        c = mod (clock (), 10) + 1;
                                        if (node.sector (x, y).point (b, c) = ".") then do;
                                                  node.breachN = node.breachN + 1;
                                                  node.breach (node.breachN).SX = x;
                                                  node.breach (node.breachN).SY = y;
                                                  node.breach (node.breachN).PX = b;
                                                  node.breach (node.breachN).PY = c;
                                                  node.breach (node.breachN).engineer = mod (clock (), 250) + 250;
                                                  node.breach (node.breachN).prisoners = max (0, mod (clock (), 5) - 3);
                                                  node.sector (x, y).point (b, c) = BREACH;
                                                  it_was_not_placed = "0"b;
                                             end;
                                   end;
                              end;
                    end;
               end;
          end;
          
/* Set up the FORTS */

          do x = 1 to 5;
               do y = 1 to 5;
                    z = 0;
                    if (x ^= node.SX) | (y ^= node.SY) then z = mod (clock (), 10) + 1;
                    if (z = 1) then do;
                              it_was_not_placed = "1"b;
                              do while (it_was_not_placed);
                                   b = mod (clock (), 10) + 1;
                                   c = mod (clock (), 10) + 1;
                                   if (node.sector (x, y).point (b, c) = ".") then do;
                                             node.fortN = node.fortN + 1;
                                             node.fort (node.fortN).SX = x;
                                             node.fort (node.fortN).SY = y;
                                             node.fort (node.fortN).PX = b;
                                             node.fort (node.fortN).PY = c;
                                             node.fort (node.fortN).guard = mod (clock (), 250) + 250;
                                             a = mod (clock (), 10) + 1;
                                             if (a = 1) & ^(node.secret_plans_found) then do;
                                                       node.secret_plans_found = "1"b;
                                                       node.fort (node.fortN).secret_plans_here = "1"b;
                                                  end;
                                             node.sector (x, y).point (b, c) = FORT;
                                             it_was_not_placed = "0"b;
                                        end;
                              end;
                         end;
               end;
          end;

          return;

print_introduction: entry (nptr, last_name);

          call ioa_ ("^/*************************");
          call ioa_ ("^/To: M.I. ^a ^a", RANK (node.rank), last_name);
          call ioa_ ("Planetary Strike Mission");
          call ioa_ ("Mission briefing:");
          call ioa_ ("^10t^d Arachnids", node.arachnidT + node.heavy_beamT);
          call ioa_ ("^10t?? Skinnies");
          call ioa_$nnl ("^10t^a Supply ships:", node.supplyN);
          do x = 1 to node.supplyN;
               call ioa_$nll (" ^d - ^d^[,^]", node.supply (x).SX, node.supply (x).SY, (x ^= node.supplyN));
          end;
          call ioa_ ("^/Drop site: Sector ^d - ^d, Mark ^d - ^d", node.SX, node.SY, node.PX, node.PY);
          call ioa_ ("You have ^.1f hours to complete your mission.  The retrieval beacon will", node.time_left);
          call ioa_ ("land at Sector ^d - ^d, Mark ^d - ^d.  Good luck!", node.beacon.SX, node.beacon.SY, node.beacon.PX, node.beacon.PY);
          call ioa_ ("^/*************************");
          return;
          
daemon: entry (scip);

          Nptr = ssu_$get_info_ptr (scip);
          call update_chart (Nptr);
          Node.score.total = calc_score (Nptr, "arachnids");
          Node.score.total = Node.score.total + calc_score (Nptr, "skinnies");
          Node.score.total = Node.score.total + calc_score (Nptr, "heavy_beams");
          Node.score.total = Node.score.total + calc_score (Nptr, "missile_ls");
          Node.score.total = Node.score.total + calc_score (Nptr, "mountains");
          Node.score.total = Node.score.total + calc_score (Nptr, "supplies");
          Node.score.total = Node.score.total + calc_score (Nptr, "prisoners");
          if (Node.score.total >= Node.nuke_bonus_score) then do;
                    call ioa_ ("^/***BONUS NUKE BOMB awarded -- Score: ^d", Node.score.total);
                    Node.nuke_bonus_score = Node.nuke_bonus_score + 5000;
                    Node.nuke_bombN = Node.nuke_bombN + 1;
               end;
          if (Node.time_left < 1.1) & ^(Node.landed) then do;
                    call ioa_ ("^/\"...To the everlasting glory of the infantry, shines the name, shines the name^/name of Rodger Young!\"  Retrieval Beacon has landed at Sector ^d - ^d.", Node.beacon.SX, Node.beacon.SY);
                    Node.time_left = 2.5;
                    call ioa_ ("^/Retrieval time: ^.1f hrs.", Node.time_left);
                    Node.sector (Node.beacon.SX, Node.beacon.SY).point (Node.beacon.PX, Node.beacon.PY) = BEACON;
                    Node.beacon.landed = "1"b;
               end;
          if (Node.SX = Node.beacon.SX) & (Node.SY = Node.beacon.SY) & (Node.PX = Node.beacon.PX) & (Node.PY = Node.beacon.PY) & Node.beacon.landed then do;
                    call ioa_ ("^/Retrieval successful!");
                    Node.score.success_ratio = round (((Node.score.arachnids_Xed + Node.score.heavy_beams_Xed) / (Node.arachnidT + Node.heavy_beamT)) * 100, 0);
                    if (Node.score.success_ratio > 50) then Node.score.rank_bonus = Node.rank * 100;
                    Node.score.skinny_prisoners = (Node.skinnyT + Node.missile_lT) - (Node.score.skinnies_Xed + Node.missile_ls_Xed);
                    call ioa_ ("^3x*************************");
                    call ioa_ ("^/Your mission yielded a success ratio of ^d%", Node.score.success_ratio);
                    if (Node.score.skinny_prionsers > 0) then call ioa_ ("The remaining ^d Skinnies surrender.", Node.score.skinny_prisoners);
                    if (Node.score.success_ratio = 100) then call ioa_ ("You will be recommended for promotion.");
                    call ioa_ ("Aecturnae gloriae peditum...");
                    call ssu_$execute_string (scip, "score -all", code);
                    call ioa_ ("^/*************************");
                    call ssu_$abort_subsystem (scip, (0));
               end;
          else if (Node.time_left < .1) then do;
                    call ioa_ ("^/Retrieval complete.");
                    Node.score.captured_penalty = -500;
                    call you_lose ("no_time");
               end;
          if ^(H_or_M_present (Node.distress.SX, Node.distress.SY, Nptr)) & Node.distress.notified then do;
                    Node.distress.SX = 0;
                    Node.distress.SY = 0;
                    Node.distress.which_supply = 0;
                    Node.distress.notified = "0"b;
               end;
          call attack_supply_ships (Nptr);
          return;
          
scanner: entry (scip, nptr);

          if ^(node.equipment.scanner.working) then do;
                    call ioa_ ("^/Scanner is damaged.");
                    return;
               end;
          call ioa_ ("^/SCANNER READOUT: Sector ^d - ^d^/", node.SX, node.SY);
          do x = (node.SX - 1) to (node.SX + 1);
               do y = (node.SY - 1) to (node.SY + 1);
                    if (x < 1) | (x > 5) | (y < 1) | (y > 5) then call ioa_$nnl ("   ----");
                    else do;
                              call ioa_$nnl ("^3x^d^d^a^a", node.sector (x, y).arachnidN, node.sector (x, y).skinnyN, node.sector (x, y).radiation, node.sector (x, y).supply);
                              node.chart (x, y).arachnidN = ltrim (char (node.sector (x, y).arachnidN));
                              node.chart (x, y).skinnyN = ltrim (char (node.sector (x, y).skinnyN));
                              node.chart (x, y).radiation = node.sector (x, y).radiation;
                              node.chart (x, y).supply = node.sector (x, y).supply;
                         end;
               end;
               call ioa_ ();
          end;
          return;

chart: entry (scip, nptr);

          call ioa_ ("^/PLANETARY CHART:");
          call ioa_ ("^/     1      2      3      4      5");
          call ioa_ ("    --------------------------------");
          do x = 1 to 5;
               call ioa_$nnl ("^d:  ", x);
               do y = 1 to 5;
                    call ioa_$nnl ("^a^a^a^a^3x", node.chart (x, y).arachnidN, node.chart (x, y).skinnyN, node.char (x, y).radiation, node.chart (x, y).supply);
               end;
               call ioa_ ();
          end;
          call ioa_ ("^/LOCUS PROXIMITY: Sector ^d - ^d, Mark ^d - ^d", node.SX, node.SY, node.PX, node.PY);
          return;
          
snooper: entry (scip, nptr);

          dcl     print_status           bit (1) init ("0"b);
          
          if ^(node.equipment.snooper.working) then do;
                    call ioa_ ("^/Snooper is damaged.");
                    return;
               end;
          call ssu_$arg_count (scip, argn);
          do x = 1 to argn;
               call ssu_$arg_ptr (scip, x, argp, argl);
               if (arg = "-status") | (arg = "-st") then print_status = "1"b;
               else if (substr (arg, 1, 1) = "-") then call ssu_$abort_line (scip, error_table_$badopt, "^a", arg);
               else call ssu_$abort_line (scip, (0), "^/^5xUsage: snooper {-status}");
          end;
          
          call ioa_ ("^/SECTOR ^d - ^d, MARK ^d - ^d", node.SX, node.SY, node.PX, node.PY);
          call ioa_ ("^/    1 2 3 4 5 6 7 8 9 10");
          do x = 1 to 10;
               if (x < 10) then call ioa_$nnl (" ^d ", x);
               else call ioa_$nnl ("10 ");
               do y = 1 to 10;
                    call ioa_$nnl (" ^a", node.sector (node.SX, node.SY).point (x, y));
               end;
               if print_status & (x > 1) then call snooper_status (x);
               call ioa_ ();
          end;
          node.chart (node.SX, node.SY).arachnidN = ltrim (char (node.sector (node.SX, node.SY).arachnidN));
          node.chart (node.SX, node.SY).skinnyN = ltrim (char (node.sector (node.SX, node.SY).skinnyN));
          node.chart (node.SX, node.SY).radiation = node.sector (node.SX, node.SY).radiation;
          node.chart (node.SX, node.SY).supply = node.sector (node.SX, node.SY).supply;
          return;
          
snooper_status: procedure (line_no);

          dcl     line_no          fixed bin parm;
          
          if (line_no = 2) then call ioa_$nnl ("^5xSuit condition:^25t^d pts.", node.suit_pts);
          else if (line_no = 3) then call ioa_$nnl ("^5xBody condition:^25t^d pts.", node.body_pts);
          else if (line_no = 4) then call ioa_$nnl ("^5xBooster energy:^25t^d units", node.jet_energy);
          else if (line_no = 5) then call ioa_$nnl ("^5xFlamer energy:^25t^d units", node.flamer_energy);
          else if (line_no = 6) then call ioa_$nnl ("^5xHE bombs left:^25t^d", node.HE_bombN);
          else if (line_no = 7) then call ioa_$nnl ("^5xNuke bombs left:^25t^d", node.nuke_bombN);
          else if (line_no = 8) then call ioa_$nnl ("^5xArachnids left:^25t^d", (node.arachnidT + node.heavy_beamT - node.score.arachnids_Xed - node.score.heavy_beams_Xed));
          else if (line_no = 9) then call ioa_$nnl ("^5xTime left:^25t^.1f hrs.", node.time_left);
          else return;
          
     end snooper_status;
     
status: entry (scip, nptr);

          dcl     all_switch            bit (1) init ("0"b);
          dcl     damage_switch         bit (1) init ("0"b);
          dcl     general_status        bit (1) init ("0"b);
          dcl     damage_report         bit (1) init ("0"b);
          dcl     I_want_to_see         (23) bit (1) init ((23) ("0"b));
          
          call ssu_$arg_count (scip, argn);
          if (argn = 0) then do;
                    general_status = "1"b;
                    I_want_to_see = "1"b;
               end;
          do x = 1 to argn;
               call ssu_$arg_ptr (scip, x, argp, argl);
               if (arg = "-damage") | (arg = "-dmg") then damage_switch = "1"b;
               else if (arg = "-all") | (arg = "-a") then all_switch = "1"b;
               else if (substr (arg, 1, 1) = "-") then call ssu_$abort_line (scip, (0), "^/^5xUsage: status {item} {-damage {item}} {-all}");
               else if ^(damage_switch) then do;
                         if (arg = "locus") | (arg = "loc") then I_want_to_see (LOCUS) = "1"b;
                         else if (arg = "suit") then I_want_to_see (SUIT) = "1"b;
                         else if (arg = "body") then I_want_to_see (BODY) = "1"b;
                         else if (arg = "boosters") | (arg = "jets") | (arg = "jet_boosters") then I_want_to_see (BOOSTER_ENERG) = "1"b;
                         else if (arg = "flamer_rifle") | (arg = "flamer") | (arg = "rifle") then I_want_to_see (FLAMER_ENERGY) = "1"b;
                         else if (arg = "he_bombs") | (arg = "he") then I_want_to_see (HE_BOMBN) = "1"b;
                         else if (arg = "nuke_bombs") | (arg = "nukes") then I_want_to_see (NUKE_BOMBN) = "1"b;
                         else if (arg = "arachnids") | (arg = "bugs") then I_want_to_see (BUGS_LEFT) = "1"b;
                         else if (arg = "time") then I_want_to_see (TIME_LEFT) = "1"b;
                         else call ssu_$abort_line (scip, (0), "^/^xNo status for ""^a"".", arg);
                         general_status = "1"b;
                    end;
               else do;
                         if (arg = "scanner") then I_want_to_see (SCANNER) = "1"b;
                         else if (arg = "snooper") then I_want_to_see (SNOOPER) = "1"b;
                         else if (arg = "flamer_rifle") | (arg = "flamer") | (arg = "rifle") then I_want_to_see (FLAMER_RIFLE) = "1"b;
                         else if (arg = "he_launcher") | (arg = "he") then I_want_to_see (HE_LAUNCHER) = "1"b;
                         else if (arg = "nuke_launcher") | (arg = "nuker") then I_want_to_see (NUKE_LAUNCHER) = "1"b;
                         else if (arg = "listening_device") | (arg = "ld") then I_want_to_see (LISTENING_DEV) = "1"b;
                         else if (arg = "jet_boosters") | (arg = "boosters") | (arg = "jets") then I_want_to_see (JET_BOOSTERS) = "1"b;
                         else call ssu_$abort_line (scip, (0), "^/^5xNo such device. ^a", arg);
                         damage_report = "1"b;
                    end;
          end;
          if all_switch then do;
                    general_status = "1"b;
                    damage_report = "1"b;
                    I_want_to_see = "1"b;
               end;
          if damage_switch & ^(damage_report) then do;
                    damage_report = "1"b;
                    do x = 10 to 16;
                         I_want_to_see (x) = "1"b;
                    end;
               end;
          if general_status then do;
                    call ioa_ ("^/Trooper status report:");
                    if I_want_to_see (LOCUS) then call ioa_ ("^3xLocus proximity:^25tSector ^d - ^d, Mark ^d - ^d", node.SX, node.SY, node.PX, node.PY);
                    if I_want_to_see (SUIT) then call ioa_ ("^3xSuit condition:^25t^d pts.", node.suit_pts);
                    if I_want_to_see (BODY) then call ioa_ ("^3xBody condition:^25t^d pts.", node.body_pts);
                    if I_want_to_see (BOOSTER_ENERGY) then call ioa_ ("^3xBooster energy:^25t^d units", node.jet_energy);
                    if I_want_to_see (FLAMER_ENERGY) then call ioa_ ("^3xFlamer energy:^25t^d units", node.flamer_energy);
                    if I_want_to_see (HE_BOMBN) then call ioa_ ("^3xHE bombs left:^25t^d", node.HE_bombN);
                    if I_want_to_see (NUKE_BOMBN) then call ioa_ ("^3xNuke bombs left:^25t^d", node.nuke_bombN);
                    if I_want_to_see (BUGS_LEFT) then call ioa_ ("^3xArachnids left:^25t^d", (node.arachnidT + node.heavy_beamT - node.score.arachnids_Xed - node.score.heavy_beams_Xed));
                    if I_want_to_see (TIME_LEFT) then call ioa_ ("^3xTime left:^25t^.1f hrs.", node.time_left);
               end;
          if damage_report then do;
                    call ioa_ ("^/Trooper damage report:");
                    if I_want_to_see (SCANNER) then do;
                              call ioa_ ("^3xScanner^25t^[WORKING^]^[DAMAGED^]", node.equipment.scanner.working, ^node.equipment.scanner.working);
                              if ^(node.equipment.scanner.working) then call ioa_ ("^6xRepair time: ^.1f hrs. (^.1f hrs.)", node.equipment.scanner.repair_time, max (0, node.equipment.scanner.repair_time - 1));
                         end;
                    if I_want_to_see (SNOOPER) then do;
                              call ioa_ ("^3xSnooper^25t^[WORKING^]^[DAMAGED^]", node.equipment.snooper.working, ^node.equipment.snooper.working);
                              if ^(node.equipment.snooper.working) then call ioa_ ("^6xRepair time: ^.1f hrs. (^.1f hrs.)", node.equipment.snooper.repair_time, max (0, node.equipment.snooper.repair_time - 1));
                         end;
                    if I_want_to_see (JET_BOOSTERS) then do;
                              call ioa_ ("^3xJet boosters^25t^[WORKING^]^[DAMAGED^]", node.equipment.jet_boosters.working, ^node.equipment.jet_boosters.working);
                              if ^(node.equipment.jet_boosters.working) then call ioa_ ("^6xRepair time: ^.1f hrs. (^.1f hrs.)", node.equipment.jet_boosters.repair_time, max (0, node.equipment.jet_boosters.repair_time - 1));
                         end;
                    if I_want_to_see (FLAMER_RIFLE) then do;
                              call ioa_ ("^3xFlamer rifle^25t^[WORKING^]^[DAMAGED^]", node.equipment.flamer.working, ^node.equipment.flamer.working);
                              if ^(node.equipment.flamer.working) then call ioa_ ("^6xRepair time: ^.1f hrs. (^.1f hrs.)", node.equipment.flamer.repair_time, max (0, node.equipment.flamer.repair_time - 1));
                         end;
                    if I_want_to_see (HE_LAUNCHER) then do;
                              call ioa_ ("^3xHE launcher^25t^[WORKING^]^[DAMAGED^]", node.equipment.HE_launcher.working, ^node.equipment.HE_launcher.working);
                              if ^(node.equipment.HE_launcher.working) then call ioa_ ("^6xRepair time: ^.1f hrs. (^.1f hrs.)", node.equipment.HE_launcher.repair_time, max (0, node.equipment.HE_launcher.repair_time - 1));
                         end;
                    if I_want_to_see (NUKE_LAUNCHER) then do;
                              call ioa_ ("^3xNuke launcher^25t^[WORKING^]^[DAMAGED^]", node.equipment.nuke_launcher.working, ^node.equipment.nuke_launcher.working);
                              if ^(node.equipment.nuke_launcher.working) then call ioa_ ("^6xRepair time: ^.1f hrs. (^.1f hrs.)", node.equipment.nuke_launcher.repair_time, max (0, node.equipment.nuke_launcher.repair_time - 1));
                         end;
                    if I_want_to_see (LISTENING_DEV) then do;
                              call ioa_ ("^3xListening dev^25t^[WORKING^]^[DAMAGED^]", node.equipment.listening_dev.working, ^node.equipment.listening_dev.working);
                              if ^(node.equipment.listening_dev.working) then call ioa_ ("^6xRepair time: ^.1f hrs. (^.1f hrs.)", node.equipment.listening_dev.repair_time, max (0, node.equipment.listening_dev.repair_time - 1));
                         end;
               end;
          return;
          
fly: entry (scip, nptr);

          dcl     target_SX              fixed bin init (0);
          dcl     target_SY              fixed bin init (0);
          dcl     target_PX              fixed bin init (0);
          dcl     target_PY              fixed bin init (0);
          dcl     real_target_PX         fixed bin init (0);
          dcl     real_target_PY         fixed bin init (0);
          dcl     original_SX            fixed bin init (0);
          dcl     original_SY            fixed bin init (0);
          dcl     original_PX            fixed bin init (0);
          dcl     original_PY            fixed bin init (0);
          
          call ssu_$arg_count (scip, argn);
          if (arg ^= 4) then call ssu_$abort_line (scip, (0), "^/^5xUsage: fly Sector_X Sector_Y Mark_X Mark_Y");
          do x = 1 to 4;
               call ssu_$arg_ptr (scip, x, argp, argl);
               if (verify (arg, "1234567890") ^= 0) then call ssu_$abort_line (scip, (0), "^/^5xInvalid coordinate. ^a", arg);
               if (x = 1) then target_SX = decimal (arg);
               else if (x = 2) then target_SY = decimal (arg);
               else if (x = 3) then real_target_PX = decimal (arg);
               else real_target_PY = decimal (arg);
          end;
          if (target_SX > 5) | (target_SX = 0) | (target_SY > 5) | (target_SY = 0) | (real_target_PX > 10) | (real_target_PX = 0) | (real_target_PY > 10) | (real_target_PY = 0) then call ssu_$abort_line (scip, (0), "^/^5xFlight not possible with given vectors.");
          original_SX = node.SX;
          original_SY = node.SY;
          original_PX = node.PX;
          original_PY = node.PY;
          
          if (target_SX = original_SX) & (target_SY = original_SY) then call ssu_$abort_line (scip, (0), "^/^5xUse the ""jump"" request for movement within a sector.");
          if ^(node.equipment.jet_boosters.working) then do;
                    call ioa_ ("^/Jet boosters are damaged.");
                    return;
               end;
          if (node.jet_energy < calc_move_cost (node.SX, node.SY, node.PX, node.PY, target_SX, target_SY, real_target_PX, real_target_PY)) then do;
                    call ioa_ ("^/Jet boosters do not have sufficient energy remaining for flight.");
                    return;
               end;
          if (node.time_left < calc_move_time (node.SX, node.SY, node.PX, node.PY, target_SX, target_SY, real_target_PX, real_target_PY)) then do;
                    call ioa_ ("^/Time left: ^.1f hrs., Flight time: ^.1f", node.time_left, calc_move_time (node.SX, node.SY, node.PX, node.PY, target_SX, target_SY, real_target_PX, real_target_PY));
                    return;
               end;
          call get_target_point (node.SX, node.SY, node.PX, node.PY, target_SX, target_SY, target_PX, target_PY);
          call move ("Flight", nptr, target_PX, target_PY);
          node.SX = target_SX;
          node.SY = target_SY;
          node.PX = real_target_PX;
          node.PY = real_target_PY;
          call got_there_ok (nptr);
          node.jet_energy = node.jet_energy - calc_move_cost (original_SX, original_SY, original_PX, original_PY, node.SX, node.SY, node.PX, node.PY);
          node.time_left = node.time_left - calc_move_time (original_SX, original_SY, original_PX, original_PY, node.SX, node.SY, node.PX, node.PY);
          node.sector (original_SX, original_SY).point (original_PX, original_PY) = ".";
          if node.was_in_rad then do;
                    node.sector (original_SX, original_SY).point (original_PX, original_PY) = RADIATION;
                    if ^(node.sitting_in_rad) then node.was_in_rad = "0"b;
               end;
          if node.sitting_in_rad then node.was_in_rad = "1"b;
          node.sector (node.SX, node.SY).point (node.PX, node.PY) = TROOPER;
          call ioa_ ("^/***LOCUS PROXIMITY: Sector ^d - ^d, Mark ^d - ^d", node.SX, node.SY, node.PX, node.PY);
          call enemy_attack (nptr);
          return;
          